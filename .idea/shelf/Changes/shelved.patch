Index: src/backend/routes/likes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/backend/routes/likes.py b/src/backend/routes/likes.py
new file mode 100644
--- /dev/null	(date 1679647501660)
+++ b/src/backend/routes/likes.py	(date 1679647501660)
@@ -0,0 +1,39 @@
+from fastapi import APIRouter, Depends, HTTPException
+from sqlalchemy.orm import Session
+from src.backend.database import get_db
+from src.backend.sessions import FastAPISession
+from src.backend.internals import add_like, remove_like
+
+router = APIRouter()
+
+# эндпойнт для добавления лайка
+@router.post("/likes/{item_id}")
+async def like_item(
+    item_id: int,
+    session: FastAPISession = Depends(),
+    db: Session = Depends(get_db),
+):
+    user_id = session.get("user_id")
+    if not user_id:
+        raise HTTPException(status_code=401, detail="Not authorized")
+    try:
+        add_like(db, item_id, user_id)
+    except ValueError as e:
+        raise HTTPException(status_code=400, detail=str(e))
+    return {"message": f"Item {item_id} was liked"}
+
+# эндпойнт для отмены лайка
+@router.delete("/likes/{item_id}")
+async def unlike_item(
+    item_id: int,
+    session: FastAPISession = Depends(),
+    db: Session = Depends(get_db),
+):
+    user_id = session.get("user_id")
+    if not user_id:
+        raise HTTPException(status_code=401, detail="Not authorized")
+    try:
+        remove_like(db, item_id, user_id)
+    except ValueError as e:
+        raise HTTPException(status_code=400, detail=str(e))
+    return {"message": f"Like for item {item_id} was removed"}
Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from fastapi import FastAPI\r\nfrom sqlmodel import SQLModel\r\n\r\nfrom src.backend.database import engine\r\nfrom src.backend.routes import (\r\n    nickname_validation,\r\n    authentication,\r\n    stories_endpoint,\r\n    users_endpoint,\r\n    goals_endpoint,\r\n    deauthentication\r\n)\r\n\r\napp = FastAPI()\r\n\r\n\r\n@app.on_event(\"startup\")\r\nasync def startup():\r\n    SQLModel.metadata.create_all(engine)\r\n\r\n\r\napp.include_router(\r\n    nickname_validation.app,\r\n    tags=['User']\r\n    )\r\napp.include_router(\r\n    deauthentication.app,\r\n    tags=[\"Auth\"]\r\n)\r\napp.include_router(\r\n    users_endpoint.app,\r\n    tags=[\"User\"]\r\n)\r\napp.include_router(\r\n    goals_endpoint.app,\r\n    tags=[\"Goal\"]\r\n)\r\napp.include_router(\r\n    authentication.app,\r\n    tags=[\"Auth\"]\r\n)\r\napp.include_router(\r\n    stories_endpoint.app,\r\n    tags=[\"Story\"]\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision d26c7a6b2cd7fa8743218e7cfd681ebb6c9846d7)
+++ b/app.py	(date 1679649545147)
@@ -8,7 +8,8 @@
     stories_endpoint,
     users_endpoint,
     goals_endpoint,
-    deauthentication
+    deauthentication,
+    likes
 )
 
 app = FastAPI()
